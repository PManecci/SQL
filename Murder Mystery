Documenting work and solution for The SQL Murder Mystery available at mystery.knightlab.com

##THE DATABASE##

TABLE NAMES: 
crime_scene_report
drivers_license
facebook_event_checkin
interview
get_fit_now_member
get_fit_now_check_in
solution
income
person

##THE MYSTERY##
We are searching for who committed the murder that occurred on Jan. 15, 2018 in SQL City. 

#1. Retrieve the crime scene report from the database: 
*/ I first ran a select all on the crime_scene_report table to determine how the dates were formatted and the column headers, 
from there I wrote the following query to pull the correct report for the case we are looking into /*

SELECT *
FROM crime_scene_report
WHERE date = 20180115 AND city = "SQL City" AND type = "murder";

RESULT: One report providing the following information: 
"Security footage shows that there were 2 witnesses. 
The first witness lives at the last house on "Northwestern Dr". 
The second witness, named Annabel, lives somewhere on "Franklin Ave".

#2. Locate the witnesses and their respective interviews:
*/ Looking at the tables available the next step should be to review the interviews from the two witnesses - 
I ran a query on the interview table and it provides only a person_id and transcript so I will have to use the person table 
to locate the witness's person_id and then match that to the correct transcript /*

WITNESS #1

SELECT *
FROM person
WHERE address_street_name = "Northwestern Dr"
ORDER BY address_number DESC

RESULT: id: 14887, name: Morty Schapiro, license_id: 118009, address: 4919 Northwestern Dr, ssn: 111564949

WITNESS #2

SELECT * 
FROM person
WHERE address_street_name = "Franklin Ave"
AND name LIKE "Anna%"

RESULT: id: 16371, name: Annabel Miller, license_id: 490173, address: 103 Franklin Ave, ssn: 318771143

INTERVIEW TRANSCRIPTS: 

SELECT * 
FROM interview
WHERE person_id = 14887 OR person_id = 16371

Morty's Interview Statement: 
"I heard a gunshot and then saw a man run out. 
He had a "Get Fit Now Gym" bag. 
The membership number on the bag started with "48Z". 
Only gold members have those bags. 
The man got into a car with a plate that included "H42W"."

Annabel's Interview Statement: 
"I saw the murder happen, and I recognized the killer from my gym when I was working out last week on January the 9th."

#3. Narrow down possible suspects using partials of gym member number and license plate
/* I started by looking for the gym members that had member numbers matching the partial and gold memberships,
I then also looked at those two members check-in logs to see if they were at the gym on January 9th*/

SELECT *
FROM get_fit_now_member
WHERE id LIKE '48Z%' AND membership_status = 'gold'

RESULTS: 
id: 48Z7A, person_id: 28819, name: Joe Germuska, membership_start_date: March 5 2016
id: 48Z55, person_id: 67318, name: Jeremy Bowers, membership_start_date: January 1, 2016

SELECT *
FROM get_fit_now_check_in
WHERE membership_id = '48Z7A' OR membership_id = '48Z55'

RESULTS: 
Joe was at the gym on January 9th from 1600 to 1730
Jeremy was at the gym on January 9th from 1530 to 1700

/* Next step was to cross reference to the license plate to see if either Joe or Jeremy own the vehicle with the partial, 
I started with locating the possible vehicles in the drivers_license table */

SELECT *
FROM drivers_license
WHERE plate_number LIKE '%H42W%'

RESULTS: 
Car 1 - ID: 183779 - Toyota Prius, Owner: Female with Blue eyes and Blonde hair, Age 21, Height 65
Car 2 - ID: 423327 - Chevrolet Spark LS, Owner: Male with Brown eyes and Brown hair, Age 30, Height 70
Car 3 - ID: 664760 - Nissan Altima, Owner: Male with Black eyes and Black hair, Age 21, Height 71

/* Finally, I'll check the license ID for the three vehicles with partial plate match with the person table to locate the owner of each vehicle */

SELECT *
FROM person
WHERE license_id = 183779 OR license_id = 423327 OR license_id = 664760

RESULTS: 
We have a match! The second car belongs to Jeremy Bowers so he is most likely our murderer!

#4. Check the results

INSERT INTO solution VALUES (1, 'Jeremy Bowers');
  SELECT value FROM solution;

RESULTS: "Congrats, you found the murderer! But wait, there's more... If you think you're up for a challende, try querying the interview 
transcript of the murderer to find the real villian behind this crime. If you feel especially confident in your SQL skills, try to complete this
final step with no more than 2 queries. Use this same INSERT statement with your new suspect to check your answer."

PART TWO:

#1. Look up the interview transcript of our murderer!

SELECT *
FROM interview
WHERE person_id = 67318

RESULTS: "I was hired by a woman with a lot of money. I don't know her name but I know she's around 5'5" (65") or 5'7" (67"). 
She has red hair and she drives a Tesla Model S. I know that she attended the SQL Symphony Concert 3 times in December 2017"

#2. Search for mystery woman!
/* I know that this information is going to require a join of multiple tables: 
I can check income using the person's ssn in the income table, (COLUMN NAMES: ssn, annual_income)
I can check gender, height, and hair color in the drivers_license table, (COLUMN NAMES: id (matches license_id), height, hair_color, gender)
I can check attendance at the SQL Symhony using a person_id in the facebook_event_checkin table, (COLUMN NAMES: person_id, event_name, date)
and all should relate to a single person in the person table (COLUMN NAMES: id (person_id), license_id (id) ssn, name)

SELECT p.name
FROM person AS p
  JOIN drivers_license AS dl
    ON dl.id = p.license_id
  JOIN facebook_event_checkin AS f
    ON f.person_id = p.id
  JOIN income AS i
    ON i.ssn = p.ssn
WHERE
  dl.gender = "female"
  AND dl.hair_color = "red"
  AND dl.height BETWEEN 65 AND 67
  AND f.event_name = "SQL Symphony Concert"
  AND f.date BETWEEN 20171201 AND 20171230
GROUP BY p.id
ORDER BY i.annual_income DESC

RESULTS: Miranda Priestly

#3. Check our results: 

INSERT INTO solution VALUES (1, 'Miranda Priestly');
  SELECT value FROM solution;
  
RESULTS: "Congrats, you found the brains behind the murder! Everyone in SQL City hails you as the greatest SQL detective of all time. 
Time to break out the champagne!"


